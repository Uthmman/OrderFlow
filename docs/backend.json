{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "role": {
          "type": "string",
          "description": "Role of the user (Admin, Manager, Sales, Designer)."
        }
      },
      "required": [
        "id",
        "email",
        "role"
      ]
    },
    "Customer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Customer",
      "type": "object",
      "description": "Represents a customer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the customer."
        },
        "name": {
          "type": "string",
          "description": "Name of the customer."
        },
        "contactInformation": {
          "type": "string",
          "description": "Contact information of the customer."
        }
      },
      "required": [
        "id",
        "name",
        "contactInformation"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order."
        },
        "customerId": {
          "type": "string",
          "description": "Reference to Customer. (Relationship: Customer 1:N Order)"
        },
        "description": {
          "type": "string",
          "description": "Description of the order."
        },
        "imageAttachments": {
          "type": "array",
          "description": "Image attachments for the order.",
          "items": {
            "type": "string"
          }
        },
        "voiceAttachments": {
          "type": "array",
          "description": "Voice attachments for the order.",
          "items": {
            "type": "string"
          }
        },
        "colorSelection": {
          "type": "string",
          "description": "Color selection for the order."
        },
        "materialSelection": {
          "type": "string",
          "description": "Material selection for the order."
        },
        "sizeDimensions": {
          "type": "string",
          "description": "Size dimensions for the order."
        },
        "pricing": {
          "type": "number",
          "description": "Pricing for the order."
        },
        "paymentDetails": {
          "type": "string",
          "description": "Payment details for the order."
        },
        "deadline": {
          "type": "string",
          "description": "Deadline for the order.",
          "format": "date-time"
        },
        "urgent": {
          "type": "boolean",
          "description": "Indicates if the order is urgent."
        },
        "status": {
          "type": "string",
          "description": "Status of the order."
        }
      },
      "required": [
        "id",
        "customerId",
        "description",
        "pricing",
        "paymentDetails",
        "deadline",
        "urgent",
        "status"
      ]
    },
    "ChatMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatMessage",
      "type": "object",
      "description": "Represents a chat message.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the chat message."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N ChatMessage)"
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:N ChatMessage)"
        },
        "message": {
          "type": "string",
          "description": "Content of the chat message."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the chat message.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "orderId",
        "message",
        "timestamp"
      ]
    },
    "Notification": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Notification",
      "type": "object",
      "description": "Represents a notification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the notification."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Notification)"
        },
        "type": {
          "type": "string",
          "description": "Type of notification (new order, approaching deadline, new chat message, order status update)."
        },
        "message": {
          "type": "string",
          "description": "Message content of the notification."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the notification.",
          "format": "date-time"
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:N Notification) Optional, as some notifications might not be order-related."
        }
      },
      "required": [
        "id",
        "userId",
        "type",
        "message",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Uses path-based ownership for user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "customers/{customerId}",
        "definition": {
          "entityName": "Customer",
          "schema": {
            "$ref": "#/backend/entities/Customer"
          },
          "description": "Stores customer profiles.",
          "params": [
            {
              "name": "customerId",
              "description": "The unique identifier of the customer."
            }
          ]
        }
      },
      {
        "path": "customers/{customerId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores orders associated with a specific customer. Includes denormalized 'customerId' for authorization independence.",
          "params": [
            {
              "name": "customerId",
              "description": "The unique identifier of the customer."
            },
            {
              "name": "orderId",
              "description": "The unique identifier of the order."
            }
          ]
        }
      },
      {
        "path": "customers/{customerId}/orders/{orderId}/chat_messages/{chatMessageId}",
        "definition": {
          "entityName": "ChatMessage",
          "schema": {
            "$ref": "#/backend/entities/ChatMessage"
          },
          "description": "Stores chat messages for a specific order. Includes denormalized 'orderId' and 'userId' for authorization independence.",
          "params": [
            {
              "name": "customerId",
              "description": "The unique identifier of the customer."
            },
            {
              "name": "orderId",
              "description": "The unique identifier of the order."
            },
            {
              "name": "chatMessageId",
              "description": "The unique identifier of the chat message."
            }
          ]
        }
      },
      {
        "path": "users/{userId}/notifications/{notificationId}",
        "definition": {
          "entityName": "Notification",
          "schema": {
            "$ref": "#/backend/entities/Notification"
          },
          "description": "Stores notifications for a specific user. Uses path-based ownership. The 'userId' is inherently available from the path.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "notificationId",
              "description": "The unique identifier of the notification."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and ease of debugging, following the principles of Authorization Independence, Clarity of Intent, and DBAC. It leverages denormalization and structural segregation to simplify security rules and enable secure list operations. The design also models access using consistent patterns, such as path-based ownership and membership maps. The use of explicit state modeling and predictable schema ensures data clarity and consistency.\n\n**Authorization Independence:**\n\n*   **Orders subcollection under Customers:** The `orders` subcollection under each `customer` includes a denormalized `customerId`. This eliminates the need for `get()` calls to the parent `customer` document in security rules, which would break atomic operations.\n\n*   **ChatMessages subcollection under Orders:** The `chat_messages` subcollection includes denormalized `orderId` and `userId`. This ensures security rules for chat messages can be written without relying on parent document reads.\n\n*   **Notifications subcollection under Users:** The `notifications` subcollection includes a `userId`. This design allows simple path based read and write rules for each user.\n\n**Structural Segregation:**\n\n*   Each top-level collection (`users`, `customers`) and subcollection (`/customers/{customerId}/orders`, `/users/{userId}/notifications`, `/customers/{customerId}/orders/{orderId}/chat_messages`) contains documents with a homogeneous security posture. This simplifies rules and enhances security.\n\n**Access Modeling:**\n\n*   **Private Data:** `/users/{userId}/notifications` follows path-based ownership, ensuring only the user can access their notifications.\n\n*   **Hierarchical Paths for User-Owned Data:** `/customers/{customerId}/orders/{orderId}/chat_messages` continues the path structure for nested data. This enables straightforward security rules based on user and customer relationships.\n\n**QAPs (Rules are not Filters):**\n\n*   The structure supports secure `list` operations. For instance, listing orders for a customer is achieved via the `/customers/{customerId}/orders` subcollection, which enforces security at the collection level rather than relying on filtering.\n\n**Invariants:**\n\n*   Timestamps are included in both chat messages and notifications.\n\nThis design provides a robust and secure foundation for the OrderFlow application, facilitating simple, clear, and maintainable security rules."
  }
}