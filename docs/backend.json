{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile within the OrderFlow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "role": {
          "type": "string",
          "description": "The user's role within the application (e.g., Admin, Manager, Sales, Designer)."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "role"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed within the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order."
        },
        "customerId": {
          "type": "string",
          "description": "Reference to Customer. (Relationship: Customer 1:N Order)"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the order requirements."
        },
        "attachments": {
          "type": "array",
          "description": "Array of URLs pointing to attachments (images, voice notes).",
          "items": {
            "type": "string"
          }
        },
        "color": {
          "type": "string",
          "description": "Color selection for the order."
        },
        "material": {
          "type": "string",
          "description": "Material selection for the order."
        },
        "sizeDimensions": {
          "type": "string",
          "description": "Size dimensions for the order."
        },
        "price": {
          "type": "number",
          "description": "Pricing for the order."
        },
        "paymentDetails": {
          "type": "string",
          "description": "Payment details for the order."
        },
        "deadline": {
          "type": "string",
          "description": "Deadline for the order completion.",
          "format": "date-time"
        },
        "isUrgent": {
          "type": "boolean",
          "description": "Indicates whether the order is urgent."
        },
        "status": {
          "type": "string",
          "description": "The current status of the order."
        }
      },
      "required": [
        "id",
        "customerId",
        "description",
        "deadline",
        "isUrgent",
        "status"
      ]
    },
    "Customer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Customer",
      "type": "object",
      "description": "Represents a customer in the customer management system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the customer."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the customer."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the customer."
        },
        "email": {
          "type": "string",
          "description": "The email address of the customer.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the customer."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "phone"
      ]
    },
    "ChatMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatMessage",
      "type": "object",
      "description": "Represents a chat message within a specific order channel.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the chat message."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:N ChatMessage)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N ChatMessage)"
        },
        "message": {
          "type": "string",
          "description": "The content of the chat message."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "orderId",
        "userId",
        "message",
        "timestamp"
      ]
    },
    "Notification": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Notification",
      "type": "object",
      "description": "Represents a notification for a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the notification."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Notification)"
        },
        "message": {
          "type": "string",
          "description": "The content of the notification."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the notification was created.",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "description": "The type of notification (e.g., new order, approaching deadline, new message, status update)."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:N Notification) Optional, relevant only when notification related to an Order."
        }
      },
      "required": [
        "id",
        "userId",
        "message",
        "timestamp",
        "type"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/profile",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profiles. Access is restricted to the user themselves. The document ID is the same as the user's UID.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase UID of the user."
            }
          ]
        }
      },
      {
        "path": "/customers/{customerId}",
        "definition": {
          "entityName": "Customer",
          "schema": {
            "$ref": "#/backend/entities/Customer"
          },
          "description": "Stores customer information.",
          "params": [
            {
              "name": "customerId",
              "description": "The unique identifier for the customer."
            }
          ]
        }
      },
      {
        "path": "/customers/{customerId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores order data, with customerId denormalized into each order document. Includes denormalized `customerId` for authorization independence.",
          "params": [
            {
              "name": "customerId",
              "description": "The unique identifier for the customer."
            },
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            }
          ]
        }
      },
      {
        "path": "/orders/{orderId}/chat_messages/{messageId}",
        "definition": {
          "entityName": "ChatMessage",
          "schema": {
            "$ref": "#/backend/entities/ChatMessage"
          },
          "description": "Stores chat messages related to each order. The `orderId` is included in each document.",
          "params": [
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            },
            {
              "name": "messageId",
              "description": "The unique identifier for the chat message."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/notifications/{notificationId}",
        "definition": {
          "entityName": "Notification",
          "schema": {
            "$ref": "#/backend/entities/Notification"
          },
          "description": "Stores notifications for each user.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase UID of the user."
            },
            {
              "name": "notificationId",
              "description": "The unique identifier for the notification."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "roles_admin",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "A collection used to store admin roles. The existence of a document in this collection grants admin privileges.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase UID of the admin user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to ensure security, scalability, and ease of debugging, following the principles of Authorization Independence, Clarity of Intent, DBAC, and QAPs. Authorization independence is achieved through denormalization. For example, the `orders` subcollection within a customer document denormalizes relevant customer data to avoid `get()` calls in security rules, allowing atomic operations and simplifying access control. Structural segregation is used to group data with similar access requirements. Access modeling follows consistent patterns, utilizing path-based ownership for user-related data and membership maps for collaborative data. Here is a breakdown:\n\n*   `/users/{userId}/profile`: Stores user profiles. Access is restricted to the user themselves (path-based ownership).\n*   `/customers/{customerId}`: Stores customer information. Orders are stored as a subcollection under each customer.\n*   `/customers/{customerId}/orders/{orderId}`: Stores order data, with customerId denormalized into each order document. This supports QAPs since listing orders only requires access to the specific customer's orders, not the entire collection. Security rules can efficiently filter orders based on customer ownership without complex queries or filters.\n*   `/orders/{orderId}/chat_messages/{messageId}`: Stores chat messages related to each order. Uses hierarchical path for ownership and easy querying of messages within a specific order.\n*   `/users/{userId}/notifications/{notificationId}`: Stores notifications for each user. Path-based ownership ensures only the user can access their notifications.\n*   `/roles_admin/{userId}`: A collection used to store admin roles. The existence of a document in this collection grants admin privileges."
  }
}