{
  "entities": {
    "Customer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Customer",
      "type": "object",
      "description": "Represents a customer profile within the OrderFlow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Customer entity."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the customer."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the customer."
        },
        "email": {
          "type": "string",
          "description": "The email address of the customer.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the customer."
        },
        "address": {
          "type": "string",
          "description": "The physical address of the customer."
        },
        "orderIds": {
          "type": "array",
          "description": "References to Orders placed by this customer. (Relationship: Customer 1:N Order)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed by a customer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Order entity."
        },
        "customerId": {
          "type": "string",
          "description": "Reference to Customer. (Relationship: Customer 1:N Order)"
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the order."
        },
        "attachments": {
          "type": "array",
          "description": "Array of URLs to attached files (images, voice recordings, etc.).",
          "items": {
            "type": "string"
          }
        },
        "color": {
          "type": "string",
          "description": "The color selected for the order."
        },
        "material": {
          "type": "string",
          "description": "The material selected for the order."
        },
        "size": {
          "type": "string",
          "description": "The size dimensions of the order."
        },
        "price": {
          "type": "number",
          "description": "The price of the order."
        },
        "paymentDetails": {
          "type": "string",
          "description": "Details of the payment for the order."
        },
        "deadline": {
          "type": "string",
          "description": "The deadline for the order completion.",
          "format": "date-time"
        },
        "isUrgent": {
          "type": "boolean",
          "description": "Indicates if the order is urgent."
        },
        "status": {
          "type": "string",
          "description": "The current status of the order."
        },
        "chatChannelId": {
          "type": "string",
          "description": "Reference to ChatChannel associated with this order. (Relationship: Order 1:1 ChatChannel)"
        }
      },
      "required": [
        "id",
        "customerId",
        "description",
        "deadline",
        "status"
      ]
    },
    "ChatChannel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatChannel",
      "type": "object",
      "description": "Represents a chat channel associated with an order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ChatChannel entity."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:1 ChatChannel)"
        },
        "messages": {
          "type": "array",
          "description": "Array of message IDs in the chat channel. (Relationship: ChatChannel 1:N ChatMessage)",
          "items": {
            "type": "string"
          }
        },
        "participants": {
          "type": "array",
          "description": "Array of user IDs participating in the chat channel.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "orderId"
      ]
    },
    "ChatMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatMessage",
      "type": "object",
      "description": "Represents a single message within a chat channel.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ChatMessage entity."
        },
        "chatChannelId": {
          "type": "string",
          "description": "Reference to ChatChannel. (Relationship: ChatChannel 1:N ChatMessage)"
        },
        "senderId": {
          "type": "string",
          "description": "The id of the user that sent this message"
        },
        "text": {
          "type": "string",
          "description": "The content of the message."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "chatChannelId",
        "senderId",
        "text",
        "timestamp"
      ]
    },
    "UserNotification": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserNotification",
      "type": "object",
      "description": "Represents a notification for a specific user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserNotification entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who receives the notification."
        },
        "type": {
          "type": "string",
          "description": "The type of notification (e.g., new order, deadline approaching, new message, status update)."
        },
        "message": {
          "type": "string",
          "description": "The message content of the notification."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of when the notification was created.",
          "format": "date-time"
        },
        "isRead": {
          "type": "boolean",
          "description": "Indicates if the notification has been read by the user."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to the Order associated with this notification (if applicable)."
        }
      },
      "required": [
        "id",
        "userId",
        "type",
        "message",
        "timestamp",
        "isRead"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "role": {
          "type": "string",
          "description": "The role of the user (e.g., Admin, Manager, Sales, Designer)."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "role"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/customers/{customerId}",
        "definition": {
          "entityName": "Customer",
          "schema": {
            "$ref": "#/backend/entities/Customer"
          },
          "description": "Stores customer profiles. Customer data is stored in a top-level `customers` collection.",
          "params": [
            {
              "name": "customerId",
              "description": "The unique identifier for the customer."
            }
          ]
        }
      },
      {
        "path": "/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores order information.  Accessible based on customerId and orderId. The customerId is stored within the Order document to allow authorization independence.",
          "params": [
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            }
          ]
        }
      },
      {
        "path": "/chatChannels/{chatChannelId}",
        "definition": {
          "entityName": "ChatChannel",
          "schema": {
            "$ref": "#/backend/entities/ChatChannel"
          },
          "description": "Stores chat channel metadata. Includes denormalized 'participants' array for authorization independence.",
          "params": [
            {
              "name": "chatChannelId",
              "description": "The unique identifier for the chat channel."
            }
          ]
        }
      },
      {
        "path": "/chatChannels/{chatChannelId}/messages/{messageId}",
        "definition": {
          "entityName": "ChatMessage",
          "schema": {
            "$ref": "#/backend/entities/ChatMessage"
          },
          "description": "Stores individual chat messages within a channel.",
          "params": [
            {
              "name": "chatChannelId",
              "description": "The unique identifier for the chat channel."
            },
            {
              "name": "messageId",
              "description": "The unique identifier for the chat message."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/notifications/{notificationId}",
        "definition": {
          "entityName": "UserNotification",
          "schema": {
            "$ref": "#/backend/entities/UserNotification"
          },
          "description": "Stores user-specific notifications using path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "notificationId",
              "description": "The unique identifier for the notification."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a secure, scalable, and easily maintainable database for the OrderFlow application. It leverages path-based ownership for user-specific data and membership maps for collaborative data access, ensuring authorization independence and simplifying security rules. \n\nSpecifically, the design implements authorization independence by denormalizing authorization data. For example, access to orders is controlled via the customer id, which is part of every order object, eliminating the need for rules to `get()` customer data to authorize order access. Similarly, the `participants` field in the `chatChannels` collection denormalizes the list of users that can access that chat channel, avoiding the need to check user roles in other collections.  User-owned data (notifications) are stored using path-based ownership.\n\nTo support secure `list` operations (QAPs), data with different access requirements are stored in separate collections. Customer data is stored in a top-level `customers` collection, Orders are stored in a top-level `orders` collection and linked to the customers with the `customerId`. Chat channels and messages are also stored in top-level collections. User-specific data like notifications, however, is stored in subcollections under the respective user document.\n\nThis structure avoids hierarchical authorization dependencies, making security rules simpler and more robust. It also enables atomic operations and simplifies debugging."
  }
}