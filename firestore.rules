rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner or an admin.
     * @deny (get, create, update, delete) if the user is not the owner or an admin.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to customer profiles.
     * @path /customers/{customerId}
     * @allow (get, create, update, delete) if the user is a manager or an admin.
     * @deny (get, create, update, delete) if the user is not a manager or an admin.
     * @principle Restricts management of customer profiles to authorized personnel.
     */
    match /customers/{customerId} {

        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to order information within the customer document.
     * @path /customers/{customerId}/orders/{orderId}
     * @allow (get, create, update, delete) if the user has the necessary role.
     * @deny (get, create, update, delete) if the user does not have the necessary role.
     * @principle Manages access to orders based on user roles.
     */
    match /customers/{customerId}/orders/{orderId} {

        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to attachments related to an order within the customer document.
     * @path /customers/{customerId}/orders/{orderId}/attachments/{attachmentId}
     * @allow (get, create, update, delete) if the user is authorized.
     * @deny (get, create, update, delete) if the user is not authorized.
     * @principle Enforces path-based ownership for attachments.
     */
    match /customers/{customerId}/orders/{orderId}/attachments/{attachmentId} {

        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to chat messages related to an order within the customer document.
     * @path /customers/{customerId}/orders/{orderId}/chatMessages/{chatMessageId}
     * @allow (get, create, update, delete) if the user is authorized.
     * @deny (get, create, update, delete) if the user is not authorized.
     * @principle Bases access on user roles and order ownership.
     */
    match /customers/{customerId}/orders/{orderId}/chatMessages/{chatMessageId} {

        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to admin role documents.
     * @path /roles_admin/{userId}
     * @allow get: if isSignedIn();
     * @allow create: if request.auth.uid == userId;
     * @allow update, delete: if false;
     * @deny (get, create, update, delete) if the user is not an admin.
     */
     match /roles_admin/{userId} {

        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if false;

        allow create: if isSignedIn() && request.auth.uid == userId;
        allow update: if false;
        allow delete: if false;
    }
  }
}