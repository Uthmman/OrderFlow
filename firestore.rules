/**
 * @file Firebase Security Rules for OrderFlow Application
 *
 * @description This ruleset enforces a strict user-ownership model for user profiles and notifications,
 * customer-ownership for customers and orders, and order-ownership for chat messages.
 * Admin privileges are granted based on the existence of a document in the `/roles_admin` collection.
 *
 * Data Structure:
 * - /users/{userId}/profile: User profile data. Only the user can access their own profile.
 * - /customers/{customerId}: Customer data.
 * - /customers/{customerId}/orders/{orderId}: Order data associated with a customer.
 * - /orders/{orderId}/chat_messages/{messageId}: Chat messages associated with an order.
 * - /users/{userId}/notifications/{notificationId}: Notifications for a specific user. Only the user can access their own notifications.
 * - /roles_admin/{userId}: Admin role assignments.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and accessible only to the authenticated user.
 * - Customers are accessible to all authenticated users.
 * - Orders are accessible to all authenticated users.
 * - Chat messages are accessible to all authenticated users.
 * - Notifications are strictly private and accessible only to the authenticated user.
 * - Admin privileges are granted based on the existence of a document in `/roles_admin/{userId}`.
 * - Listing of user profiles is disallowed for security.
 *
 * Denormalization for Authorization:
 * - Orders are stored as subcollections of customer documents, with the `customerId` denormalized into each order document. This allows for efficient access control based on customer ownership without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read and write their own profile.
     * @path /users/{userId}/profile
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc/profile.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete their profile at /users/user_abc/profile.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot access the profile at /users/user_abc/profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId}/profile {
      //function
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Secures customer documents.
     * @path /customers/{customerId}
     * @allow (get, list) Any authenticated user can read customer data.
     * @allow (create) Any authenticated user can create customer data.
     * @allow (update, delete) Any authenticated user can update and delete customer data.
     * @deny Non-authenticated users cannot access customer data.
     */
    match /customers/{customerId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures order documents stored as subcollections of customer documents.
     * @path /customers/{customerId}/orders/{orderId}
     * @allow (get, list) Any authenticated user can read customer's order data.
     * @allow (create) Any authenticated user can create customer's order data.
     * @allow (update, delete) Any authenticated user can update and delete customer's order data.
     * @deny Non-authenticated users cannot access customer's order data.
     */
    match /customers/{customerId}/orders/{orderId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures chat messages related to specific orders.
     * @path /orders/{orderId}/chat_messages/{messageId}
     * @allow (get, list) Any authenticated user can read chat messages.
     * @allow (create) Any authenticated user can create chat messages.
     * @allow (update, delete) Any authenticated user can update and delete chat messages.
     * @deny Non-authenticated users cannot access chat messages.
     */
    match /orders/{orderId}/chat_messages/{messageId} {
      function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures user notifications, allowing only the owner to read and write their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with UID 'user_abc' can create a notification at /users/user_abc/notifications/notification_123.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete their notification at /users/user_abc/notifications/notification_123.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot access notifications at /users/user_abc/notifications/notification_123.
     * @principle Enforces document ownership for all operations on user notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

     /**
      * @description Grants admin privileges based on the existence of a document in the `/roles_admin` collection.
      * @path /roles_admin/{userId}
      */
      match /roles_admin/{userId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
         function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isSignedIn() && isAdmin();
        allow list: if false;
        allow create: if isSignedIn() && isAdmin();
        allow update: if false;
        allow delete: if isSignedIn() && isAdmin() && resource != null;
      }
  }
}