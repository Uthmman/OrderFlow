rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Access is restricted to the user themselves.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile with matching userId in the document.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete their own profile.
     * @deny (create, get, update, delete) - User with ID 'user456' cannot access user profile with ID 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages customer profiles. Only managers and admins can manage customers.
     * @path /customers/{customerId}
     * @allow (create, update, delete) - An admin can create, update, or delete a customer.
     * @allow (get, list) - An admin can read a customer's data.
     * @deny (create, update, delete) - A non-admin user cannot create, update, or delete a customer.
     * @principle Restricts customer management to authorized roles.
     */
    match /customers/{customerId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        allow get, list: if isAdmin();
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages orders within a customer document. Access is controlled by user roles (Sales, Manager, Designer).
     * @path /customers/{customerId}/orders/{orderId}
     * @allow (create, update, delete) - An admin can create, update, or delete an order for a customer.
     * @allow (get, list) - An admin can read an order for a customer.
     * @deny (create, update, delete) - A non-admin user cannot create, update, or delete an order for a customer.
     * @principle Enforces role-based access control for order management.
     */
    match /customers/{customerId}/orders/{orderId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        allow get, list: if isAdmin();
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages attachments related to an order within the customer document. Path-based ownership ensures only authorized users can access attachments.
     * @path /customers/{customerId}/orders/{orderId}/attachments/{attachmentId}
     * @allow (create, update, delete) - An admin can create, update, or delete an attachment for an order.
     * @allow (get, list) - An admin can read attachments for an order.
     * @deny (create, update, delete) - A non-admin user cannot create, update, or delete attachments for an order.
     * @principle Enforces path-based ownership for attachment access.
     */
    match /customers/{customerId}/orders/{orderId}/attachments/{attachmentId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        allow get, list: if isAdmin();
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages chat messages related to an order within the customer document. Access is based on user roles and order ownership.
     * @path /customers/{customerId}/orders/{orderId}/chatMessages/{chatMessageId}
     * @allow (create, update, delete) - An admin can create, update, or delete a chat message for an order.
     * @allow (get, list) - An admin can read chat messages for an order.
     * @deny (create, update, delete) - A non-admin user cannot create, update, or delete chat messages for an order.
     * @principle Enforces role-based access control for chat message management.
     */
    match /customers/{customerId}/orders/{orderId}/chatMessages/{chatMessageId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        allow get, list: if isAdmin();
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Documents in this collection denote admin roles. Existence of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) - Only the user themselves can create their admin role document, effectively self-registering as an admin.
     * @allow (get) - Any user can check if a user is an admin.
     * @deny (update, delete) - No one can update or delete these documents after creation.
     * @principle DBAC (Database-Based Access Control) for admin privileges.
     */
    match /roles_admin/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn() && request.auth.uid == userId;
        allow update, delete: if false;
    }
  }
}