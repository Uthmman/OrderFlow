/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control and path-based ownership to protect data integrity and user privacy. Access is granted based on a user's role (Admin, Manager, Sales, Designer) and their relationship to the data (owner, collaborator).
 *
 * Data Structure:
 * The Firestore database is structured as follows:
 * - /users/{userId}: Stores user profiles, accessible only by the user and admins.
 * - /customers/{customerId}: Stores customer profiles, manageable only by managers and admins.
 * - /customers/{customerId}/orders/{orderId}: Stores order information related to a customer. Access is role-based.
 * - /customers/{customerId}/orders/{orderId}/attachments/{attachmentId}: Stores attachments related to an order, with path-based ownership for access control.
 * - /customers/{customerId}/orders/{orderId}/chatMessages/{chatMessageId}: Stores chat messages related to an order, with access based on user roles and order ownership.
 * - /roles_admin/{userId}: Documents in this collection grant admin privileges to a user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data under /users/{userId}.
 * - Customer data under /customers/{customerId} can only be managed by managers and admins.
 * - Access to orders, attachments, and chat messages is role-based and restricted based on the user's role and their relationship to the customer and order.
 * - Admin privileges are granted based on the existence of a document in the /roles_admin/{userId} collection.
 * - Listing of all orders at the root `/orders` collection is denied to prevent unauthorized data access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document, based on the userId.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document, based on the userId and document existence.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges.
     * @returns {boolean} True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user has manager privileges.
     * @returns {boolean} True if the user has manager privileges, false otherwise.
     */
    function isManager() {
        return isAdmin(); // For now, assume admin implies manager.  Expand as needed.
    }


    /**
     * @description Grants access to user-specific data.
     * @path /users/{userId}
     * @allow (create) User 'Km9uE0xfT5TDC9M2w1Va0qAm6K43' can create their own profile.
     * @allow (get) User 'Km9uE0xfT5TDC9M2w1Va0qAm6K43' can read their own profile.
     * @deny (create) User 'Km9uE0xfT5TDC9M2w1Va0qAm6K43' cannot create a profile for another user.
     * @deny (update) User 'Km9uE0xfT5TDC9M2w1Va0qAm6K43' cannot update another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Grants access to customer data for managers and admins.
     * @path /customers/{customerId}
     * @allow (create) Admin can create a customer.
     * @allow (get) Admin can read a customer.
     * @deny (create) User cannot create a customer.
     * @deny (update) User cannot update a customer.
     * @principle Restricts customer management to authorized roles.
     */
    match /customers/{customerId} {
      allow get: if isManager() || isAdmin();
      allow list: if isManager() || isAdmin();
      allow create: if isManager() || isAdmin();
      allow update: if isManager() || isAdmin();
      allow delete: if isManager() || isAdmin();
    }

    /**
     * @description Grants access to order data for authorized roles within a customer.
     * @path /customers/{customerId}/orders/{orderId}
     * @allow (create) Admin can create an order for a customer.
     * @allow (get) Admin can read an order for a customer.
     * @deny (create) User cannot create an order for a customer.
     * @deny (update) User cannot update an order for a customer.
     * @principle Restricts order management to authorized roles.
     */
    match /customers/{customerId}/orders/{orderId} {
      allow get: if isManager() || isAdmin();
      allow list: if false; // Listing within a specific customer is not supported
      allow create: if isManager() || isAdmin();
      allow update: if isManager() || isAdmin();
      allow delete: if isManager() || isAdmin();
    }

    /**
     * @description Grants access to attachment data for authorized users within an order.
     * @path /customers/{customerId}/orders/{orderId}/attachments/{attachmentId}
     * @allow (create) Admin can create an attachment for an order.
     * @allow (get) Admin can read an attachment for an order.
     * @deny (create) User cannot create an attachment for an order.
     * @deny (update) User cannot update an attachment for an order.
     * @principle Restricts attachment management to authorized roles.
     */
    match /customers/{customerId}/orders/{orderId}/attachments/{attachmentId} {
      allow get: if isManager() || isAdmin();
      allow list: if isManager() || isAdmin();
      allow create: if isManager() || isAdmin();
      allow update: if isManager() || isAdmin();
      allow delete: if isManager() || isAdmin();
    }

    /**
     * @description Grants access to chat message data for authorized users within an order.
     * @path /customers/{customerId}/orders/{orderId}/chatMessages/{chatMessageId}
     * @allow (create) Admin can create a chat message for an order.
     * @allow (get) Admin can read a chat message for an order.
     * @deny (create) User cannot create a chat message for an order.
     * @deny (update) User cannot update a chat message for an order.
     * @principle Restricts chat message management to authorized roles.
     */
    match /customers/{customerId}/orders/{orderId}/chatMessages/{chatMessageId} {
      allow get: if isManager() || isAdmin();
      allow list: if isManager() || isAdmin();
      allow create: if isManager() || isAdmin();
      allow update: if isManager() || isAdmin();
      allow delete: if isManager() || isAdmin();
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (create) User 'admin_user' can create their own admin role.
     * @allow (get) User 'admin_user' can read their own admin role.
     * @deny (create) User 'normal_user' cannot create an admin role for themselves.
     * @deny (update) User 'admin_user' cannot update their own admin role (should not be needed).
     * @principle DBAC: Presence of a document confers admin privileges.
     */
    match /roles_admin/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if isOwner(userId);
    }

     /**
      * @description Denies listing of all orders at the root collection.  The reported error was caused by attempting to list the /orders collection, which does not exist in the data model and has no security rule.
      * @path /orders
      * @deny (list) All users are denied listing orders at the root.
      * @principle Prevents unauthorized access to order data. Orders can only be accessed via the customer document.
      */
     match /orders {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
     }
  }
}