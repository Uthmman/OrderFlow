/**
 * @description This ruleset enforces a strict user-ownership model for user-specific data (profiles, notifications),
 *              and a customer-centric model for orders and chat messages.  It prioritizes data locality
 *              and avoids costly `get()` operations by denormalizing key authorization fields within documents.
 * @dataStructure
 *   - /users/{userId}: Stores user profiles, accessible only by the owning user.
 *   - /customers/{customerId}: Stores customer profiles, with open read access and restricted write access.
 *   - /customers/{customerId}/orders/{orderId}: Stores orders, accessible only by authenticated users and requires customerId match.
 *   - /customers/{customerId}/orders/{orderId}/chat_messages/{chatMessageId}: Stores chat messages, accessible only by the user who created them and only if user matches customer and order.
 *   - /users/{userId}/notifications/{notificationId}: Stores user notifications, accessible only by the owning user.
 * @keySecurityDecisions
 *   - Users can only access their own profile and notifications.
 *   - Customers are publicly readable, but only admins can create, update, or delete them (TODO: Add admin role check).
 *   - Orders and chat messages are scoped to customers and require authentication.
 *   - Listing all users or customers is disallowed (explicitly denied).
 * @denormalizationForAuthorization
 *   - Orders contain a `customerId` field, avoiding the need to read the parent customer document for authorization.
 *   - ChatMessages contain `orderId` and `userId` fields, avoiding the need to read parent order or user documents.
 * @structuralSegregation
 *   - User-specific data (profiles, notifications) is stored under /users/{userId}, ensuring private access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, ensuring only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'Km9uE0xfT5TDC9M2w1Va0qAm6K43' can create their own profile at /users/Km9uE0xfT5TDC9M2w1Va0qAm6K43 if request.auth.uid == userId.
     * @allow (get, update, delete) - User 'Km9uE0xfT5TDC9M2w1Va0qAm6K43' can read, update, or delete their profile at /users/Km9uE0xfT5TDC9M2w1Va0qAm6K43.
     * @deny (create) - User 'Km9uE0xfT5TDC9M2w1Va0qAm6K43' cannot create a profile at /users/anotherUserId.
     * @deny (get, update, delete) - User 'anotherUserId' cannot read, update, or delete the profile at /users/Km9uE0xfT5TDC9M2w1Va0qAm6K43.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) && isExistingOwner(userId);
      allow delete: if isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Manages customer profiles.  Allows public read access, but restricts creation, updates, and deletions.
     * @path /customers/{customerId}
     * @allow (get, list) - Any user can read customer profiles.
     * @deny (create, update, delete) - No user can create, update, or delete customer profiles (TODO: Add admin role check).
     * @principle Allows public read access with restricted write access (TODO: Implement admin roles).
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Manages orders associated with a specific customer.  Requires the user to be authenticated to create, update, or delete orders.
     * @path /customers/{customerId}/orders/{orderId}
     * @allow (get, list) - Any authenticated user can read orders for a customer.
     * @allow (create) - Any authenticated user can create an order for a customer if the order's customerId matches the path.
     * @allow (update, delete) - Only the user who created the order can update or delete it (TODO: Implement creatorId and ownership check).
     * @deny (create) - An unauthenticated user cannot create an order.
     * @deny (update, delete) - A different user cannot update or delete an order (TODO: Implement creatorId and ownership check).
     * @principle Enforces authentication for writes and validates the customerId on create.
     */
    match /customers/{customerId}/orders/{orderId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.customerId == customerId;
      allow update: if isSignedIn() && resource.data.customerId == customerId; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource.data.customerId == customerId; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages chat messages for a specific order. Requires authentication and validates that the message belongs to the correct order.
     * @path /customers/{customerId}/orders/{orderId}/chat_messages/{chatMessageId}
     * @allow (get, list) - Any authenticated user can read chat messages for an order.
     * @allow (create) - Any authenticated user can create a chat message for an order if the message's orderId matches the path.
     * @allow (update, delete) - No user can update or delete chat messages (for simplicity and immutability).
     * @deny (create) - An unauthenticated user cannot create a chat message.
     * @deny (update, delete) - Any user cannot update or delete a chat message.
     * @principle Enforces authentication for writes and validates the orderId on create.
     */
    match /customers/{customerId}/orders/{orderId}/chat_messages/{chatMessageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.orderId == orderId && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Manages notifications for a specific user.  Ensures only the authenticated user can access their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get, list) - The user 'Km9uE0xfT5TDC9M2w1Va0qAm6K43' can read their notifications at /users/Km9uE0xfT5TDC9M2w1Va0qAm6K43/notifications.
     * @allow (create, update, delete) - User 'Km9uE0xfT5TDC9M2w1Va0qAm6K43' can create, update, or delete a notification at /users/Km9uE0xfT5TDC9M2w1Va0qAm6K43/notifications/{notificationId} if request.auth.uid == userId.
     * @deny (get, list) - User 'anotherUserId' cannot read notifications at /users/Km9uE0xfT5TDC9M2w1Va0qAm6K43/notifications.
     * @deny (create, update, delete) - User 'anotherUserId' cannot create, update, or delete notifications at /users/Km9uE0xfT5TDC9M2w1Va0qAm6K43/notifications/{notificationId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) && isExistingOwner(userId);
      allow delete: if isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Denies listing all orders at the root level.  Listing orders must be done within the context of a customer.
     * @path /orders
     * @deny (list) - No user can list all orders at the root level.
     * @principle Prevents global listing of orders; enforces customer-scoped access.
     */
    match /orders {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document based on the userId.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of the document and the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}