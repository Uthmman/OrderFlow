/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for user profiles and notifications,
 * and a customer-ownership model for customers and orders. Admin privileges are granted
 * based on the existence of a document in the `roles_admin` collection.
 *
 * @data_structure
 * - `/users/{userId}/profile`: User profile information.
 * - `/customers/{customerId}`: Customer information.
 * - `/customers/{customerId}/orders/{orderId}`: Orders associated with a specific customer.
 * - `/orders/{orderId}/chat_messages/{messageId}`: Chat messages related to a specific order.
 * - `/users/{userId}/notifications/{notificationId}`: Notifications for a specific user.
 * - `/roles_admin/{userId}`: Documents indicating admin roles.
 *
 * @key_security_decisions
 * - Users can only read and write their own profile and notifications.
 * - Customers can be created, read, updated and deleted.
 * - Orders are associated with customers and inherit customer ownership.
 * - Chat messages are associated with orders.
 * - Listing all documents in any collection is generally disallowed unless explicitly public.
 *
 * @denormalization
 * - Orders denormalize the `customerId` field to allow for efficient customer-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}/profile
     * @allow (get, update, delete) User with UID 'user123' can access /users/user123/profile.
     * @allow (create) User with UID 'user123' can create /users/user123/profile.
     * @deny (get, update, delete) User with UID 'user456' cannot access /users/user123/profile.
     * @deny (create) User with UID 'user456' cannot create /users/user123/profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/profile {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows anyone to get and list customers. Only authenticated users can create, update, and delete customers.
     * @path /customers/{customerId}
     * @allow (get, list) Any user can read customer data.
     * @allow (create, update, delete) Authenticated user can create, update or delete a customer.
     * @deny (create, update, delete) Unauthenticated user cannot create, update or delete a customer.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Enforces customer-ownership for orders. Orders are stored as subcollections of customers and inherit the customer's ownership.
     * @path /customers/{customerId}/orders/{orderId}
     * @allow (get, list) Any user can read order data.
     * @allow (create, update, delete) Authenticated user can create, update or delete an order.
     * @deny (create, update, delete) Unauthenticated user cannot create, update or delete an order.
     * @principle Enforces document ownership for writes.
     */
    match /customers/{customerId}/orders/{orderId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.customerId == customerId;
        allow update: if isSignedIn() && resource != null && resource.data.customerId == customerId;
        allow delete: if isSignedIn() && resource != null && resource.data.customerId == customerId;
    }

    /**
     * @description Enforces order-ownership for chat messages. Chat messages are stored as subcollections of orders and inherit the order's ownership.
     * @path /orders/{orderId}/chat_messages/{messageId}
     * @allow (get, list) Any user can read chat messages.
     * @allow (create, update, delete) Authenticated user can create, update or delete a chat message.
     * @deny (create, update, delete) Unauthenticated user cannot create, update or delete a chat message.
     * @principle Enforces document ownership for writes.
     */
    match /orders/{orderId}/chat_messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.orderId == orderId;
      allow update: if isSignedIn() && resource != null && resource.data.orderId == orderId;
      allow delete: if isSignedIn() && resource != null && resource.data.orderId == orderId;
    }

    /**
     * @description Enforces user-ownership for notifications. Only the authenticated user can read and write their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get, update, delete) User with UID 'user123' can access /users/user123/notifications/notification456.
     * @allow (create) User with UID 'user123' can create /users/user123/notifications/notification456.
     * @deny (get, update, delete) User with UID 'user456' cannot access /users/user123/notifications/notification456.
     * @deny (create) User with UID 'user456' cannot create /users/user123/notifications/notification456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource != null && resource.data.userId == userId;
    }

     /**
      * @description Allows admin read and write access to admin role documents based on user ID. The document ID is the same as the user's UID.
      * @path /roles_admin/{userId}
      * @allow (get, create, update, delete) Authenticated user can access roles_admin
      * @deny (get, create, update, delete) Unauthenticated user cannot access roles_admin
      * @principle Restricts access to authenticated users
      */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}