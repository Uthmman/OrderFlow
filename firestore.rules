/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data and a customer-centric model for orders and related data.
 *
 * Data Structure:
 * - /users/{userId}/profile: Stores user profiles, accessible only to the user themselves.
 * - /customers/{customerId}: Stores customer information.
 * - /customers/{customerId}/orders/{orderId}: Stores orders, accessible only with the customerId.
 * - /orders/{orderId}/chat_messages/{messageId}: Stores chat messages related to orders, accessible with the orderId.
 * - /users/{userId}/notifications/{notificationId}: Stores user-specific notifications.
 * - /roles_admin/{userId}: Stores admin roles; presence indicates admin privileges.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the authenticated user.
 * - Customers can be listed, but orders and chat messages are scoped to a specific customer and order, respectively.
 * - Admin privileges are granted based on the existence of a document in the /roles_admin/{userId} collection.
 *
 * Denormalization for Authorization:
 * - The `orders` subcollection within a customer document denormalizes relevant customer data to avoid `get()` calls in security rules, simplifying access control.
 *
 * Structural Segregation:
 * - Uses separate collections for user profiles and customer data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in /roles_admin/{userId}.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for /users/{userId}/profile:
     *              Allows a user to read, create, update, and delete their own profile.
     * @path /users/{userId}/profile
     * @allow (get, create, update, delete) if isSignedIn() && isOwner(userId)
     * @deny (get, create, update, delete) if !isSignedIn() || !isOwner(userId)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/profile {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Prevent listing of user profiles.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for /customers/{customerId}:
     *              Allows anyone to read customer information, but only admins can create, update, and delete it.
     * @path /customers/{customerId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts write access to admins.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /customers/{customerId}/orders/{orderId}:
     *              Allows anyone to read order information, but only admins can create, update, and delete it.
     * @path /customers/{customerId}/orders/{orderId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts write access to admins.
     */
    match /customers/{customerId}/orders/{orderId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /orders/{orderId}/chat_messages/{messageId}:
     *              Allows anyone to read chat messages, but only admins can create, update, and delete them.
     * @path /orders/{orderId}/chat_messages/{messageId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts write access to admins.
     */
    match /orders/{orderId}/chat_messages/{messageId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /users/{userId}/notifications/{notificationId}:
     *              Allows a user to read, create, update, and delete their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get, create, update, delete) if isSignedIn() && isOwner(userId)
     * @deny (get, create, update, delete) if !isSignedIn() || !isOwner(userId)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId); // Allow owner to list their own notifications.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for /roles_admin/{userId}:
     *              Allows only admins to create, update, and delete documents in this collection. Anyone can read.
     * @path /roles_admin/{userId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts write access to admins.
     */
    match /roles_admin/{userId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}