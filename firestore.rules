/**
 * @file Firestore Security Rules for OrderFlow
 * @version Prototyping
 *
 * @description This ruleset enforces a strict user-ownership model for user profiles and notifications.
 *   Orders and chat messages are secured through a customer-centric hierarchy, where access is controlled by customer ID.
 *   Data validation is minimized to allow for rapid prototyping and schema iteration, focusing on authorization.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profiles. Enforces owner-only access.
 * - /customers/{customerId}: Stores customer profiles.
 * - /customers/{customerId}/orders/{orderId}: Stores orders associated with a specific customer.
 *   Includes a denormalized 'customerId' for authorization.
 * - /customers/{customerId}/orders/{orderId}/chat_messages/{chatMessageId}: Stores chat messages for a specific order.
 *   Includes denormalized 'orderId' and 'userId' for authorization.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications for a specific user.
 *   Enforces owner-only access.
 *
 * @keySecurityDecisions
 * - Users can only read and write their own user profiles and notifications.
 * - Customers can be created, read, updated, and deleted by authorized users.
 * - Orders are stored within a customer's document, and access is granted to users associated with that customer.
 * - Chat messages are stored within an order's document and are accessible to users associated with that order.
 * - List operations are restricted to owners for user-specific data (notifications) and are generally allowed for customer/order data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can access and modify their profile if authenticated as 'user123'.
     * @deny (create) User with ID 'user123' cannot create a profile with ID 'user456'.
     * @deny (update, delete) User with ID 'user123' cannot modify or delete the profile of user 'user456'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner() {
        return isSignedIn() && resource.data.size() > 0;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && isExistingOwner();
      allow delete: if isSignedIn() && isOwner(userId) && isExistingOwner();
    }

    /**
     * @description Controls access to customer profiles.
     * @path /customers/{customerId}
     * @allow (create) Authenticated user can create customer profiles.
     * @allow (get, list, update, delete) Authenticated user can access customer profiles.
     * @deny (create) Unauthenticated user cannot create customer profiles.
     * @principle Allows authenticated users to manage customer profiles.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to orders associated with a specific customer.
     *   Includes denormalized 'customerId' for authorization independence.
     * @path /customers/{customerId}/orders/{orderId}
     * @allow (get, list) Any authenticated user can read orders.
     * @allow (create) Any authenticated user can create orders for a customer.
     * @allow (update, delete) Any authenticated user can update/delete existing orders.
     * @deny (create) If request.resource.data.customerId does not match customerId.
     * @principle Allows authenticated users to manage orders for customers.
     */
    match /customers/{customerId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to chat messages for a specific order.
     *   Includes denormalized 'orderId' and 'userId' for authorization independence.
     * @path /customers/{customerId}/orders/{orderId}/chat_messages/{chatMessageId}
     * @allow (get, list) Any authenticated user can read chat messages.
     * @allow (create) Any authenticated user can create chat messages for an order.
     * @allow (update, delete) Any authenticated user can update/delete existing chat messages.
     * @principle Allows authenticated users to manage chat messages for orders.
     */
    match /customers/{customerId}/orders/{orderId}/chat_messages/{chatMessageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to notifications for a specific user.
     *   Uses path-based ownership.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with ID 'user123' can create a notification if authenticated as 'user123'.
     * @allow (get, list, update, delete) User with ID 'user123' can access and modify their notifications if authenticated as 'user123'.
     * @deny (create) User with ID 'user123' cannot create a notification for user 'user456'.
     * @deny (update, delete) User with ID 'user123' cannot modify or delete the notifications of user 'user456'.
     * @principle Enforces document ownership for all operations on user notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner() {
        return isSignedIn() && resource.data.size() > 0;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && isExistingOwner();
      allow delete: if isSignedIn() && isOwner(userId) && isExistingOwner();
    }
  }
}