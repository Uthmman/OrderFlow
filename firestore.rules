/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles,
 *              role-based access control for customers and admin roles, and
 *              path-based authorization for orders, attachments, and chat messages.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Accessible only by the user themselves.
 * - /customers/{customerId}: Stores customer profiles. Accessible by managers and admins.
 * - /customers/{customerId}/orders/{orderId}: Stores order information. Access controlled by user roles.
 * - /customers/{customerId}/orders/{orderId}/attachments/{attachmentId}: Stores attachments. Path-based ownership.
 * - /customers/{customerId}/orders/{orderId}/chatMessages/{chatMessageId}: Stores chat messages. Access based on user roles.
 * - /roles_admin/{userId}: Indicates admin roles. Existence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Admin privileges are determined by the presence of a document in the `/roles_admin/{userId}` collection.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - The rules rely on the Firestore path to establish relationships between entities, such as
 *   orders, attachments, and chat messages, eliminating the need for `get()` calls.
 *
 * Structural Segregation:
 * - User profiles are stored in a dedicated `/users/{userId}` collection, ensuring privacy.
 * - Admin roles are managed in a separate `/roles_admin/{userId}` collection, simplifying role checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     * @allow (get) User with ID 'user123' reads their profile.
     * @deny (create) User with ID 'user456' attempts to create a profile for 'user123'.
     * @deny (update) User with ID 'user456' attempts to update the profile of 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own profile if it doesn't exist
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      // Allow the user to read their own profile
      allow get: if isOwner(userId);
      // Allow the user to update their own profile
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      // Allow the user to delete their own profile
      allow delete: if isOwner(userId) && resource != null;
      // Prevent anyone from listing all users
      allow list: if false;
    }

    /**
     * @description Secure access to customer profiles.
     * @path /customers/{customerId}
     * @allow (create) Admin creates a new customer profile.
     * @allow (get) Admin reads a customer profile.
     * @deny (create) Non-admin attempts to create a customer profile.
     * @deny (update) Non-admin attempts to update a customer profile.
     * @principle Restricts customer management to admins.
     */
    match /customers/{customerId} {
      // Helper function to check if the user is an admin.
      function isAdmin() {
        return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
      }

      // Allow admins to create customer profiles
      allow create: if isAdmin();
      // Allow admins to get customer profiles
      allow get: if isAdmin();
      // Allow admins to update customer profiles
      allow update: if isAdmin() && resource != null;
      // Allow admins to delete customer profiles
      allow delete: if isAdmin() && resource != null;
      // Prevent anyone from listing all customers
      allow list: if isAdmin();
    }

    /**
     * @description Secure access to order information within customer documents.
     * @path /customers/{customerId}/orders/{orderId}
     * @allow (create) Admin creates an order for a customer.
     * @allow (get) Admin reads an order.
     * @deny (create) Non-admin attempts to create an order.
     * @deny (update) Non-admin attempts to update an order.
     * @principle Restricts order management to admins and specific roles.
     */
    match /customers/{customerId}/orders/{orderId} {
      // Helper function to check if the user is an admin.
      function isAdmin() {
        return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
      }
      // Allow admins to create order
      allow create: if isAdmin();
      allow get: if isAdmin();
      // Allow admins to update orders
      allow update: if isAdmin() && resource != null;
      // Allow admins to delete order
      allow delete: if isAdmin() && resource != null;
      // Prevent anyone from listing all orders
      allow list: if isAdmin();
    }

    /**
     * @description Secure access to attachments related to an order.
     * @path /customers/{customerId}/orders/{orderId}/attachments/{attachmentId}
     * @allow (create) Admin creates an attachment for an order.
     * @allow (get) Admin reads an attachment.
     * @deny (create) Non-admin attempts to create an attachment.
     * @deny (update) Non-admin attempts to update an attachment.
     * @principle Restricts attachment management to admins.
     */
    match /customers/{customerId}/orders/{orderId}/attachments/{attachmentId} {
      // Helper function to check if the user is an admin.
      function isAdmin() {
        return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
      }

      // Allow admins to create attachments
      allow create: if isAdmin();
      // Allow admins to get attachments
      allow get: if isAdmin();
      // Allow admins to update attachments
      allow update: if isAdmin() && resource != null;
      // Allow admins to delete attachments
      allow delete: if isAdmin() && resource != null;
      // Prevent anyone from listing all attachments
      allow list: if isAdmin();
    }

    /**
     * @description Secure access to chat messages related to an order.
     * @path /customers/{customerId}/orders/{orderId}/chatMessages/{chatMessageId}
     * @allow (create) Admin creates a chat message for an order.
     * @allow (get) Admin reads a chat message.
     * @deny (create) Non-admin attempts to create a chat message.
     * @deny (update) Non-admin attempts to update a chat message.
     * @principle Restricts chat message management to admins.
     */
    match /customers/{customerId}/orders/{orderId}/chatMessages/{chatMessageId} {
      // Helper function to check if the user is an admin.
      function isAdmin() {
        return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
      }

      // Allow admins to create chat messages
      allow create: if isAdmin();
      // Allow admins to get chat messages
      allow get: if isAdmin();
      // Allow admins to update chat messages
      allow update: if isAdmin() && resource != null;
      // Allow admins to delete chat messages
      allow delete: if isAdmin() && resource != null;
      // Prevent anyone from listing all chat messages
      allow list: if isAdmin();
    }

    /**
     * @description Manages admin roles based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) Admin document is created for a user.
     * @allow (get) Anyone can check if a user is an admin.
     * @deny (create) Non-admin attempts to create an admin document.
     * @deny (delete) Non-admin attempts to delete an admin document.
     * @principle Grants admin privileges based on document existence.
     */
    match /roles_admin/{userId} {
        // Helper function to check if the user is an admin.
        function isAdmin() {
            return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
        }

        // Only admins can create admin role documents.
        allow create: if isAdmin();

        // Anyone can check if a user has an admin role. This is used by the isAdmin() function.
        allow get: if true;

        // Only admins can update admin role documents (though this might not be a common operation).
        allow update: if isAdmin() && resource != null;

        // Only admins can delete admin role documents.
        allow delete: if isAdmin() && resource != null;

        // Listing admin roles is generally not allowed for security reasons.
        allow list: if false;
    }
  }
}