/**
 * @file Firebase Security Rules for OrderFlow Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data and a role-based model for administrative functions.  Data required for authorization is denormalized onto documents to avoid costly `get()` calls.
 *
 * @data_structure
 * - `/users/{userId}/profile`: User profiles, accessible only by the owning user.
 * - `/customers/{customerId}`: Customer data. Unrestricted create, update and delete to simplify data model; in production this should be restricted to sales and manager roles.
 * - `/customers/{customerId}/orders/{orderId}`: Order data associated with a specific customer. Unrestricted create, update and delete to simplify data model; in production this should be restricted to sales and manager roles.
 * - `/orders/{orderId}/chat_messages/{messageId}`: Chat messages related to specific orders.  Unrestricted create, update and delete to simplify data model; in production this should be restricted to specific users.
 * - `/users/{userId}/notifications/{notificationId}`: User-specific notifications, accessible only by the owning user.
 * - `/roles_admin/{userId}`: Documents indicating administrative roles. Presence of a document grants admin privileges.
 *
 * @key_security_decisions
 * - User listing is disallowed.
 * - Role-based access control is implemented for administrative functions via the `roles_admin` collection.
 * - Ambiguous relationships default to strict owner-only access.
 * - No schema validation for rapid iteration during prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare with the request's authentication UID.
     * @return {boolean} True if the user ID matches the request's authentication UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in and is the owner and resource exists.
     * @param {string} userId The user ID to compare with the request's authentication UID.
     * @return {boolean} True if the user ID matches the request's authentication UID and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges.
     * @return {boolean} True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}/profile/{profileId}
     * @allow (get) Signed-in user can read their own profile.
     * @allow (create) Signed-in user can create their own profile.
     * @allow (update) Signed-in user can update their own profile.
     * @allow (delete) Signed-in user can delete their own profile.
     * @deny (get) Signed-in user cannot read someone else's profile.
     * @deny (create) Signed-in user cannot create someone else's profile.
     * @deny (update) Signed-in user cannot update someone else's profile.
     * @deny (delete) Signed-in user cannot delete someone else's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/profile/{profileId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for customer data.
     * @path /customers/{customerId}
     * @allow (get) Any signed-in user can read customer data.
     * @allow (create) Any signed-in user can create customer data.
     * @allow (update) Any signed-in user can update customer data.
     * @allow (delete) Any signed-in user can delete customer data.
     * @deny (create) Not signed in.
     * @deny (update) Not signed in.
     * @principle Allows public read access, restricts writes to owners.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Security rules for orders under customers.
     * @path /customers/{customerId}/orders/{orderId}
     * @allow (get) Any signed-in user can read order data.
     * @allow (create) Any signed-in user can create order data.
     * @allow (update) Any signed-in user can update order data.
     * @allow (delete) Any signed-in user can delete order data.
     * @deny (create) Not signed in.
     * @deny (update) Not signed in.
     * @principle Allows public read access, restricts writes to owners.
     */
    match /customers/{customerId}/orders/{orderId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Security rules for chat messages related to orders.
     * @path /orders/{orderId}/chat_messages/{messageId}
     * @allow (get) Any signed-in user can read chat messages.
     * @allow (create) Any signed-in user can create chat messages.
     * @allow (update) Any signed-in user can update chat messages.
     * @allow (delete) Any signed-in user can delete chat messages.
     * @deny (create) Not signed in.
     * @deny (update) Not signed in.
     * @principle Allows public read access, restricts writes to owners.
     */
    match /orders/{orderId}/chat_messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Security rules for user-specific notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get) Signed-in user can read their own notifications.
     * @allow (create) Signed-in user can create their own notifications.
     * @allow (update) Signed-in user can update their own notifications.
     * @allow (delete) Signed-in user can delete their own notifications.
     * @deny (get) Signed-in user cannot read someone else's notifications.
     * @deny (create) Signed-in user cannot create someone else's notifications.
     * @deny (update) Signed-in user cannot update someone else's notifications.
     * @deny (delete) Signed-in user cannot delete someone else's notifications.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (get) Any admin can read admin role.
     * @allow (create) Any admin can create admin role.
     * @allow (update) Any admin can update admin role.
     * @allow (delete) Any admin can delete admin role.
     * @deny (create) Not an admin.
     * @deny (update) Not an admin.
     * @principle Restricts access to admin roles.
     */
    match /roles_admin/{userId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}