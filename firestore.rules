/**
 * @fileOverview
 * This ruleset enforces a role-based access control model.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; accessible only by the user and admins.
 * - /customers/{customerId}: Stores customer profiles; accessible only by managers and admins.
 * - /customers/{customerId}/orders/{orderId}: Stores order information; accessible based on user roles.
 * - /customers/{customerId}/orders/{orderId}/attachments/{attachmentId}: Stores order attachments. Access is path-based.
 * - /customers/{customerId}/orders/{orderId}/chatMessages/{chatMessageId}: Stores chat messages; access based on roles and order ownership.
 * - /roles_admin/{userId}: Presence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - Listing of users and roles is disallowed.
 * - Data shape is not validated to allow for rapid prototyping. Only authorization-critical fields are validated.
 * - DBAC (Database-Based Access Control): Roles are determined by the existence of documents in dedicated collections (e.g., `/roles_admin/{uid}`).
 *
 * Denormalization for Authorization:
 * - Attachments and chatMessages subcollections under `/customers/{customerId}/orders/{orderId}` denormalize necessary authorization data.  This avoids the need for `get()` calls in security rules, enabling atomic operations and improving security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user is signed in and is the owner of the profile.
     * @allow (create) if the user is signed in and the user ID matches the document ID.
     * @deny (list) Listing users is not allowed.
     * @deny (create, update, delete) if not the owner or not an admin.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && (isExistingOwner(userId) || isAdmin()) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && (isExistingOwner(userId) || isAdmin());
    }

    /**
     * @description Controls access to customer profiles.
     * @path /customers/{customerId}
     * @allow (get, list) if the user is an admin.
     * @allow (create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if not an admin.
     * @principle Restricts access to customer data to admins only.
     */
    match /customers/{customerId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get, list: if isSignedIn() && isAdmin();
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to order information within a customer document.
     * @path /customers/{customerId}/orders/{orderId}
     * @allow (get, list) if the user is an admin.
     * @allow (create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if not an admin.
     * @principle Access is restricted to admins.
     */
    match /customers/{customerId}/orders/{orderId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get, list: if isSignedIn() && isAdmin();
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to attachments related to an order.
     * @path /customers/{customerId}/orders/{orderId}/attachments/{attachmentId}
     * @allow (get, list) if the user is an admin.
     * @allow (create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if not an admin.
     * @principle Access is restricted to admins.
     */
    match /customers/{customerId}/orders/{orderId}/attachments/{attachmentId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get, list: if isSignedIn() && isAdmin();
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to chat messages related to an order.
     * @path /customers/{customerId}/orders/{orderId}/chatMessages/{chatMessageId}
     * @allow (get, list) if the user is an admin.
     * @allow (create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if not an admin.
     * @principle Access is restricted to admins.
     */
    match /customers/{customerId}/orders/{orderId}/chatMessages/{chatMessageId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get, list: if isSignedIn() && isAdmin();
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls admin role assignment.
     * @path /roles_admin/{userId}
     * @allow (create) if the request comes from the specified admin user.
     * @allow (get, delete) if the request comes from the specified admin user.
     * @deny (list) Listing of roles is not allowed.
     * @deny (create, get, delete) if the request does not come from the specified admin user.
     * @principle Enforces that only the specified admin can manage admin roles.
     */
    match /roles_admin/{userId} {
      function isZenbabaFurniture() {
        return request.auth.token.email == "zenbabafurniture@gmail.com";
      }

      allow get: if isSignedIn() && isZenbabaFurniture();
      allow list: if false;
      allow create: if isSignedIn() && isZenbabaFurniture();
      allow update: if false;
      allow delete: if isSignedIn() && isZenbabaFurniture();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}