/**
 * @file Firebase Security Rules for OrderFlow Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data and a role-based model for administrative functions.  Data denormalization is used to avoid costly `get()` calls in security rules.
 * @data_structure
 *  - `/users/{userId}/profile`: User profiles, accessible only by the user themselves.
 *  - `/customers/{customerId}`: Customer data, accessible by authorized users (e.g., employees).
 *  - `/customers/{customerId}/orders/{orderId}`: Orders associated with a customer, accessible by authorized users.
 *  - `/orders/{orderId}/chat_messages/{messageId}`: Chat messages related to an order, accessible by authorized users.
 *  - `/users/{userId}/notifications/{notificationId}`: Notifications for each user, accessible only by the user themselves.
 *  - `/roles_admin/{userId}`:  Indicates admin privileges. Presence of a document grants admin access.
 * @key_security_decisions
 *  - User listing is disallowed.
 *  - Admin role is granted by the existence of a document in `/roles_admin/{userId}`.
 *  - Ambiguous relationships default to strict owner-only access.
 * @denormalization The `customerId` is denormalized into each order document to avoid `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to compare against the resource data.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by checking the existence of a document in `/roles_admin/{userId}`.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}/profile/{profileId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth.uid.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth.uid.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Authenticated user cannot create a profile for another user.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/profile/{profileId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if false; //No listing of profiles

      // Write rules
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for customers.
     * @path /customers/{customerId}
     * @allow (get) Admin can read customer data.
     * @allow (create) Admin can create customer data.
     * @allow (update) Admin can update customer data.
     * @allow (delete) Admin can delete customer data.
     * @deny (get) Non-admin cannot read customer data.
     * @deny (create) Non-admin cannot create customer data.
     * @deny (update) Non-admin cannot update customer data.
     * @deny (delete) Non-admin cannot delete customer data.
     * @principle Enforces role-based access control.
     */
    match /customers/{customerId} {
      // Read rules
      allow get: if isAdmin();
      allow list: if isAdmin();

      // Write rules
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for orders under a customer.
     * @path /customers/{customerId}/orders/{orderId}
     * @allow (get) Admin can read order data.
     * @allow (create) Admin can create order data.
     * @allow (update) Admin can update order data.
     * @allow (delete) Admin can delete order data.
     * @deny (get) Non-admin cannot read order data.
     * @deny (create) Non-admin cannot create order data.
     * @deny (update) Non-admin cannot update order data.
     * @deny (delete) Non-admin cannot delete order data.
     * @principle Enforces role-based access control.
     */
    match /customers/{customerId}/orders/{orderId} {
      // Read rules
      allow get: if isAdmin();
      allow list: if isAdmin();

      // Write rules
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for chat messages under an order.
     * @path /orders/{orderId}/chat_messages/{messageId}
     * @allow (get) Admin can read chat messages.
     * @allow (create) Admin can create chat messages.
     * @allow (update) Admin can update chat messages.
     * @allow (delete) Admin can delete chat messages.
     * @deny (get) Non-admin cannot read chat messages.
     * @deny (create) Non-admin cannot create chat messages.
     * @deny (update) Non-admin cannot update chat messages.
     * @deny (delete) Non-admin cannot delete chat messages.
     * @principle Enforces role-based access control.
     */
    match /orders/{orderId}/chat_messages/{messageId} {
      // Read rules
      allow get: if isAdmin();
      allow list: if isAdmin();

      // Write rules
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for user notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get) Authenticated user can read their own notifications.
     * @allow (create) Authenticated user can create notifications for themselves.
     * @allow (update) Authenticated user can update their own notifications.
     * @allow (delete) Authenticated user can delete their own notifications.
     * @deny (get) Authenticated user cannot read another user's notifications.
     * @deny (create) Authenticated user cannot create notifications for another user.
     * @deny (update) Authenticated user cannot update another user's notifications.
     * @deny (delete) Authenticated user cannot delete another user's notifications.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notifications/{notificationId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
    
    /**
     * @description Rules for granting admin privileges.
     * @path /roles_admin/{userId}
     * @allow (get) Admin can read roles_admin data.
     * @allow (create) Admin can create roles_admin data.
     * @allow (update) Admin can update roles_admin data.
     * @allow (delete) Admin can delete roles_admin data.
     * @deny (get) Non-admin cannot read roles_admin data.
     * @deny (create) Non-admin cannot create roles_admin data.
     * @deny (update) Non-admin cannot update roles_admin data.
     * @deny (delete) Non-admin cannot delete roles_admin data.
     */
     match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
  }
}